.ci:stage:exec:inspec:
  image:
    name: $REGISTRY/ci/inspec-dev:$INSPEC_PIPELINE_TAG
    entrypoint: [""]
  variables:
    CHEF_LICENSE: 'accept-silent'
    INSPEC_REPORT_PARAMS: '--show-progress --reporter cli json:reports/raw/exec-results.json'
  stage: verify
  before_script:
    - export CI_JOB_TIMESTAMP=$(date --utc --iso-8601=seconds)
  script:
    # Running Target image and checking for additional Docker inputs via .gitlab-ci.yml variable: DOCKER_INPUTS.
    - if [ -n "$DOCKER_INPUTS" ]; then
        echo "Target image requires additional runtime inputs." && docker run -d --name $(echo $TARGET | cut -d "/" -f 3 | cut -d ":" -f 1) $DOCKER_INPUTS $TARGET;
      else
        echo "Target image DOES NOT require additional runtime inputs" && docker run -d --name $(echo $TARGET | cut -d "/" -f 3 | cut -d ":" -f 1) $TARGET;
      fi
    
    # Grabbing the Container ID for the newly created target container.
    - TARGET_CONTAINER_ID=$(docker ps --filter "name=$(echo $TARGET | cut -d "/" -f 3 | cut -d ":" -f 1)" --format {{.ID}})

    # Verifying that the Container ID variable has value. If not, exit the pipeline.
    - if [ -n "$TARGET_CONTAINER_ID" ]; then
        echo "Container ID of TARGET - $TARGET_CONTAINER_ID";
      else
        echo "COULD NOT FIND CONTAINER ID. EXITING..." && exit 1;
      fi

    # Finding container status and saving to variable.
    - strStatus=$(docker ps --filter "name=$(echo $TARGET | cut -d "/" -f 3 | cut -d ":" -f 1)" --format {{.Status}} | awk '{print $NF}' | tr -d '()')

    # Querying container status, break when container reports 'healthy'.
    - >
        while [ -n "$strStatus" ]; do
          if [[ $strStatus != $strPrevStatus ]]; then
            case "$strStatus" in
              healthy)
                echo -e "\nContainer is reporting healthy. Moving on with Inspec scan."
                break 3
                ;;
              unhealthy)
                echo -e "\nContainer has started but is not in a healthy state..."
                ;;
              starting)
                echo -e "\nContainer is starting..."
                ;;
              *)
                if [[ -n $(docker ps -a --filter "name=$(echo $TARGET | cut -d "/" -f 3 | cut -d ":" -f 1)" --format {{.Status}} | grep -i Exited) ]]; then
                  echo -e "\nContainer is not running and has errored. Current status lists - Exited. Please check configuration."
                else
                  echo -e "\nContainer is Up. Moving on with Inspec scan."
                fi
                break 3
                ;;
            esac
          fi
          strPrevStatus=$strStatus
          strStatus=$(docker ps --filter "name=$(echo $TARGET | cut -d "/" -f 3 | cut -d ":" -f 1)" --format {{.Status}} | awk '{print $NF}' | tr -d '()')
        done

    # Determining if additional Docker container information or commands are needed
    - if [ -n "$COMMANDS" ]; then
        echo "Running additional commands against docker container." && docker exec -i $TARGET_CONTAINER_ID $COMMANDS
      fi
      
    # Echoing out the Inspec version for this run.
    - echo "Using Inspec Version - $(inspec version)"

    # Determining if the profile requires additional inputs. Running inspec exec in accordance.
    - if [ -n "$INSPEC_INPUTS" ]; then
        echo "Project requires inputs from - $INSPEC_INPUTS" && inspec exec $CI_PROJECT_DIR -t docker://$TARGET_CONTAINER_ID $INSPEC_REPORT_PARAMS --input-file $INSPEC_INPUTS || true;
      else
        echo "Project DOES NOT require additional inputs." && inspec exec $CI_PROJECT_DIR -t docker://$TARGET_CONTAINER_ID $INSPEC_REPORT_PARAMS || true;
      fi

    # Removing scanned container.
    - docker stop $TARGET_CONTAINER_ID && docker rm $TARGET_CONTAINER_ID
    
    # Parse JSON files and produce summary file.
    - writer reports/raw/exec-results.json reports/pipeline/exec-results.json
    - inspec_tools summary -j reports/raw/exec-results.json -f > reports/raw/exec-summary.json
  allow_failure: true
  tags:
  - docker
  artifacts:
    when: always
    paths:
    - $CI_PROJECT_DIR/reports/raw/exec-results.json
    - $CI_PROJECT_DIR/reports/raw/exec-summary.json
    - $CI_PROJECT_DIR/reports/pipeline/exec-results.json
